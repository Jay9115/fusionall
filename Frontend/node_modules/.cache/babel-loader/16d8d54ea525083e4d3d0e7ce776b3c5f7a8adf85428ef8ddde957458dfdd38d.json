{"ast":null,"code":"var _jsxFileName = \"D:\\\\fusionall\\\\src\\\\components\\\\Materials.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL, listAll } from 'firebase/storage';\nimport { getAuth } from 'firebase/auth';\nimport { collection, query, where, getDocs, doc, getDoc } from 'firebase/firestore';\nimport { firestore } from './firebase';\nimport GroupList from './GroupList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Materials = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [url, setUrl] = useState('');\n  const [groups, setGroups] = useState([]);\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [fileUrls, setFileUrls] = useState([]);\n  const [userNames, setUserNames] = useState({}); // Store uploader names by UID\n\n  // Fetch the groups the user has joined\n  useEffect(() => {\n    const fetchGroups = async () => {\n      const auth = getAuth();\n      const currentUser = auth.currentUser;\n      if (!currentUser) {\n        console.error(\"User is not logged in.\");\n        return;\n      }\n      const groupRef = collection(firestore, 'groups');\n      const groupQuery = query(groupRef, where('groupMembers', 'array-contains', currentUser.uid));\n      const groupSnapshot = await getDocs(groupQuery);\n      const userGroups = groupSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setGroups(userGroups);\n    };\n    fetchGroups();\n  }, []);\n\n  // Handle file selection\n  const handleFileChange = e => {\n    if (e.target.files[0]) {\n      setFile(e.target.files[0]);\n    }\n  };\n\n  // Handle file upload\n  const handleUpload = () => {\n    if (!selectedGroup || !file) {\n      console.error(\"No group selected or no file chosen.\");\n      return;\n    }\n    const storage = getStorage();\n    const auth = getAuth();\n    const storageRef = ref(storage, `groups/${selectedGroup.id}/files/${auth.currentUser.uid}_${file.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, file);\n    uploadTask.on('state_changed', snapshot => {\n      const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      setProgress(progress);\n    }, error => {\n      console.error(\"File upload error:\", error);\n    }, () => {\n      getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n        setUrl(downloadURL);\n        fetchFiles(selectedGroup); // Refresh file list after upload\n      });\n    });\n  };\n\n  // Fetch uploader names from Firestore\n  const fetchUserName = async uid => {\n    if (userNames[uid]) return userNames[uid]; // Return cached name if available\n    const userDoc = doc(firestore, 'users', uid); // Adjust collection name if needed\n    const userSnap = await getDoc(userDoc);\n    const userName = userSnap.exists() ? userSnap.data().name : 'Unknown User';\n    setUserNames(prev => ({\n      ...prev,\n      [uid]: userName\n    })); // Cache the name\n    return userName;\n  };\n\n  // Fetch files for the selected group\n  const fetchFiles = async group => {\n    if (!group) return;\n    const storage = getStorage();\n    const groupFilesRef = ref(storage, `groups/${group.id}/files`);\n    listAll(groupFilesRef).then(async res => {\n      const filePromises = res.items.map(async itemRef => {\n        const downloadURL = await getDownloadURL(itemRef);\n        const uploaderUid = itemRef.name.split('_')[0]; // Extract UID\n        const uploaderName = await fetchUserName(uploaderUid); // Fetch uploader name\n        return {\n          name: itemRef.name.split('_').slice(1).join('_'),\n          url: downloadURL,\n          uploader: uploaderName\n        };\n      });\n      return Promise.all(filePromises);\n    }).then(files => setFileUrls(files)).catch(error => console.error('Error fetching files:', error));\n  };\n\n  // Fetch files whenever a new group is selected\n  useEffect(() => {\n    if (selectedGroup) {\n      fetchFiles(selectedGroup);\n    }\n  }, [selectedGroup]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GroupList, {\n      groups: groups,\n      setSelectedGroup: setSelectedGroup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), selectedGroup && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Files for Group: \", selectedGroup.groupName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: `${progress}%`,\n          background: 'blue',\n          height: '5px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Previous Files:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"File Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Uploader\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Download Link\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: fileUrls.map((file, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: file.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: file.uploader\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: file.url,\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                children: \"Download\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(Materials, \"vfGfkZwd0ES4xYBnbileNA0EXXg=\");\n_c = Materials;\nexport default Materials;\nvar _c;\n$RefreshReg$(_c, \"Materials\");","map":{"version":3,"names":["React","useState","useEffect","getStorage","ref","uploadBytesResumable","getDownloadURL","listAll","getAuth","collection","query","where","getDocs","doc","getDoc","firestore","GroupList","jsxDEV","_jsxDEV","Materials","_s","file","setFile","progress","setProgress","url","setUrl","groups","setGroups","selectedGroup","setSelectedGroup","fileUrls","setFileUrls","userNames","setUserNames","fetchGroups","auth","currentUser","console","error","groupRef","groupQuery","uid","groupSnapshot","userGroups","docs","map","id","data","handleFileChange","e","target","files","handleUpload","storage","storageRef","name","uploadTask","on","snapshot","bytesTransferred","totalBytes","then","downloadURL","fetchFiles","fetchUserName","userDoc","userSnap","userName","exists","prev","group","groupFilesRef","res","filePromises","items","itemRef","uploaderUid","split","uploaderName","slice","join","uploader","Promise","all","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","groupName","type","onChange","onClick","style","width","background","height","index","href","rel","_c","$RefreshReg$"],"sources":["D:/fusionall/src/components/Materials.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL, listAll } from 'firebase/storage';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { collection, query, where, getDocs, doc, getDoc } from 'firebase/firestore';\r\nimport { firestore } from './firebase';\r\nimport GroupList from './GroupList';\r\n\r\nconst Materials = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [progress, setProgress] = useState(0);\r\n  const [url, setUrl] = useState('');\r\n  const [groups, setGroups] = useState([]);\r\n  const [selectedGroup, setSelectedGroup] = useState(null);\r\n  const [fileUrls, setFileUrls] = useState([]);\r\n  const [userNames, setUserNames] = useState({}); // Store uploader names by UID\r\n\r\n  // Fetch the groups the user has joined\r\n  useEffect(() => {\r\n    const fetchGroups = async () => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      if (!currentUser) {\r\n        console.error(\"User is not logged in.\");\r\n        return;\r\n      }\r\n\r\n      const groupRef = collection(firestore, 'groups');\r\n      const groupQuery = query(groupRef, where('groupMembers', 'array-contains', currentUser.uid));\r\n      const groupSnapshot = await getDocs(groupQuery);\r\n      const userGroups = groupSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n      setGroups(userGroups);\r\n    };\r\n\r\n    fetchGroups();\r\n  }, []);\r\n\r\n  // Handle file selection\r\n  const handleFileChange = (e) => {\r\n    if (e.target.files[0]) {\r\n      setFile(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  // Handle file upload\r\n  const handleUpload = () => {\r\n    if (!selectedGroup || !file) {\r\n      console.error(\"No group selected or no file chosen.\");\r\n      return;\r\n    }\r\n\r\n    const storage = getStorage();\r\n    const auth = getAuth();\r\n    const storageRef = ref(storage, `groups/${selectedGroup.id}/files/${auth.currentUser.uid}_${file.name}`);\r\n    const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n    uploadTask.on(\r\n      'state_changed',\r\n      (snapshot) => {\r\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n        setProgress(progress);\r\n      },\r\n      (error) => {\r\n        console.error(\"File upload error:\", error);\r\n      },\r\n      () => {\r\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n          setUrl(downloadURL);\r\n          fetchFiles(selectedGroup); // Refresh file list after upload\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  // Fetch uploader names from Firestore\r\n  const fetchUserName = async (uid) => {\r\n    if (userNames[uid]) return userNames[uid]; // Return cached name if available\r\n    const userDoc = doc(firestore, 'users', uid); // Adjust collection name if needed\r\n    const userSnap = await getDoc(userDoc);\r\n    const userName = userSnap.exists() ? userSnap.data().name : 'Unknown User';\r\n    setUserNames((prev) => ({ ...prev, [uid]: userName })); // Cache the name\r\n    return userName;\r\n  };\r\n\r\n  // Fetch files for the selected group\r\n  const fetchFiles = async (group) => {\r\n    if (!group) return;\r\n\r\n    const storage = getStorage();\r\n    const groupFilesRef = ref(storage, `groups/${group.id}/files`);\r\n    \r\n    listAll(groupFilesRef)\r\n      .then(async (res) => {\r\n        const filePromises = res.items.map(async (itemRef) => {\r\n          const downloadURL = await getDownloadURL(itemRef);\r\n          const uploaderUid = itemRef.name.split('_')[0]; // Extract UID\r\n          const uploaderName = await fetchUserName(uploaderUid); // Fetch uploader name\r\n          return { name: itemRef.name.split('_').slice(1).join('_'), url: downloadURL, uploader: uploaderName };\r\n        });\r\n        return Promise.all(filePromises);\r\n      })\r\n      .then((files) => setFileUrls(files))\r\n      .catch((error) => console.error('Error fetching files:', error));\r\n  };\r\n\r\n  // Fetch files whenever a new group is selected\r\n  useEffect(() => {\r\n    if (selectedGroup) {\r\n      fetchFiles(selectedGroup);\r\n    }\r\n  }, [selectedGroup]);\r\n\r\n  return (\r\n    <div>\r\n      {/* Group selection */}\r\n      <GroupList groups={groups} setSelectedGroup={setSelectedGroup} />\r\n      \r\n      {/* File upload and list for selected group */}\r\n      {selectedGroup && (\r\n        <div>\r\n          <h4>Files for Group: {selectedGroup.groupName}</h4>\r\n          <input type=\"file\" onChange={handleFileChange} />\r\n          <button onClick={handleUpload}>Upload</button>\r\n          <div style={{ width: `${progress}%`, background: 'blue', height: '5px' }}></div>\r\n\r\n          <h5>Previous Files:</h5>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>File Name</th>\r\n                <th>Uploader</th>\r\n                <th>Download Link</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {fileUrls.map((file, index) => (\r\n                <tr key={index}>\r\n                  <td>{file.name}</td>\r\n                  <td>{file.uploader}</td>\r\n                  <td>\r\n                    <a href={file.url} target=\"_blank\" rel=\"noopener noreferrer\">Download</a>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Materials;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}