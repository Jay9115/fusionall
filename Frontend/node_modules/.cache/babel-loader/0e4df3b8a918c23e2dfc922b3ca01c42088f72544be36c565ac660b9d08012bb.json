{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jay\\\\Desktop\\\\JAY\\\\ss\\\\fusionall\\\\src\\\\components\\\\chat.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport './chat.css';\nimport { collection, addDoc, orderBy, query, onSnapshot, serverTimestamp } from 'firebase/firestore';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { auth, firestore } from './firebase';\nimport AuthButtons from \"./AuthButtons\";\nimport FriendsList from './FriendsList'; // Import the external FriendsList component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [user] = useAuthState(auth);\n  const [selectedFriend, setSelectedFriend] = useState(null); // Selected friend's private chat\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: user ? selectedFriend ? /*#__PURE__*/_jsxDEV(PrivateChat, {\n        friend: selectedFriend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(FriendsList, {\n        setSelectedFriends: setSelectedFriend,\n        selectedFriends: []\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 25\n      }, this) // Use FriendsList from external file\n      : /*#__PURE__*/_jsxDEV(AuthButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n\n// Private chat component between the current user and a friend\n_s(Chat, \"r6IOPMAJDKpBOH52apaIq7LIdWc=\", false, function () {\n  return [useAuthState];\n});\n_c = Chat;\nfunction PrivateChat({\n  friend\n}) {\n  _s2();\n  const currentUser = auth.currentUser;\n  const dummy = useRef();\n  const [formValue, setFormValue] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  // Create a consistent chatId using both users' UIDs\n  const chatId = [currentUser.uid, friend.uid].sort().join('_'); // Sorting ensures both user UIDs form the same chatId\n\n  // Fetch chat messages between the current user and the selected friend\n  useEffect(() => {\n    const messagesRef = collection(firestore, 'chats', chatId, 'messages');\n    const q = query(messagesRef, orderBy('timestamp'));\n\n    // Real-time listener for chat messages\n    const unsubscribe = onSnapshot(q, querySnapshot => {\n      const messagesData = [];\n      querySnapshot.forEach(doc => {\n        messagesData.push(doc.data());\n      });\n      setMessages(messagesData); // Set the fetched messages to state\n      dummy.current.scrollIntoView({\n        behavior: 'smooth'\n      }); // Scroll to the bottom when new messages are received\n    });\n\n    // Clean up the listener when the component is unmounted\n    return () => unsubscribe();\n  }, [chatId]);\n  const sendMessage = async e => {\n    e.preventDefault();\n    const {\n      uid,\n      photoURL\n    } = currentUser;\n\n    // Add the new message to Firestore\n    await addDoc(collection(firestore, 'chats', chatId, 'messages'), {\n      text: formValue,\n      timestamp: serverTimestamp(),\n      sender: uid,\n      photoURL\n    });\n    setFormValue(''); // Clear the message input field\n    dummy.current.scrollIntoView({\n      behavior: 'smooth'\n    }); // Scroll to the bottom after sending a message\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Chat with \", friend.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), messages && messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        message: msg\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 57\n      }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n        ref: dummy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: formValue,\n        onChange: e => setFormValue(e.target.value),\n        placeholder: \"Type a message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !formValue,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n// Component to render each chat message\n_s2(PrivateChat, \"+gZE8lhWWaU1iHUOKBBZEA1lf9s=\");\n_c2 = PrivateChat;\nfunction ChatMessage({\n  message\n}) {\n  const {\n    text,\n    sender,\n    photoURL\n  } = message;\n  const messageClass = sender === auth.currentUser.uid ? 'sent' : 'received';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message ${messageClass}`,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png',\n      alt: \"Avatar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n_c3 = ChatMessage;\nexport default Chat;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Chat\");\n$RefreshReg$(_c2, \"PrivateChat\");\n$RefreshReg$(_c3, \"ChatMessage\");","map":{"version":3,"names":["React","useRef","useState","useEffect","collection","addDoc","orderBy","query","onSnapshot","serverTimestamp","useAuthState","auth","firestore","AuthButtons","FriendsList","jsxDEV","_jsxDEV","Fragment","_Fragment","Chat","_s","user","selectedFriend","setSelectedFriend","className","children","PrivateChat","friend","fileName","_jsxFileName","lineNumber","columnNumber","setSelectedFriends","selectedFriends","_c","_s2","currentUser","dummy","formValue","setFormValue","messages","setMessages","chatId","uid","sort","join","messagesRef","q","unsubscribe","querySnapshot","messagesData","forEach","doc","push","data","current","scrollIntoView","behavior","sendMessage","e","preventDefault","photoURL","text","timestamp","sender","username","map","msg","idx","ChatMessage","message","ref","onSubmit","value","onChange","target","placeholder","type","disabled","_c2","messageClass","src","alt","_c3","$RefreshReg$"],"sources":["C:/Users/Jay/Desktop/JAY/ss/fusionall/src/components/chat.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport './chat.css';\r\nimport { collection, addDoc, orderBy, query, onSnapshot, serverTimestamp } from 'firebase/firestore';\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { auth, firestore } from './firebase';\r\nimport AuthButtons from \"./AuthButtons\";\r\nimport FriendsList from './FriendsList'; // Import the external FriendsList component\r\n\r\nfunction Chat() {\r\n    const [user] = useAuthState(auth);\r\n    const [selectedFriend, setSelectedFriend] = useState(null); // Selected friend's private chat\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <section>\r\n                {user ? (\r\n                    selectedFriend ? (\r\n                        <PrivateChat friend={selectedFriend} />\r\n                    ) : (\r\n                        <FriendsList setSelectedFriends={setSelectedFriend} selectedFriends={[]} /> // Use FriendsList from external file\r\n                    )\r\n                ) : (\r\n                    <AuthButtons />\r\n                )}\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\n// Private chat component between the current user and a friend\r\nfunction PrivateChat({ friend }) {\r\n    const currentUser = auth.currentUser;\r\n    const dummy = useRef();\r\n    const [formValue, setFormValue] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    // Create a consistent chatId using both users' UIDs\r\n    const chatId = [currentUser.uid, friend.uid].sort().join('_'); // Sorting ensures both user UIDs form the same chatId\r\n\r\n    // Fetch chat messages between the current user and the selected friend\r\n    useEffect(() => {\r\n        const messagesRef = collection(firestore, 'chats', chatId, 'messages');\r\n        const q = query(messagesRef, orderBy('timestamp'));\r\n\r\n        // Real-time listener for chat messages\r\n        const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n            const messagesData = [];\r\n            querySnapshot.forEach((doc) => {\r\n                messagesData.push(doc.data());\r\n            });\r\n            setMessages(messagesData); // Set the fetched messages to state\r\n            dummy.current.scrollIntoView({ behavior: 'smooth' }); // Scroll to the bottom when new messages are received\r\n        });\r\n\r\n        // Clean up the listener when the component is unmounted\r\n        return () => unsubscribe();\r\n    }, [chatId]);\r\n\r\n    const sendMessage = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const { uid, photoURL } = currentUser;\r\n\r\n        // Add the new message to Firestore\r\n        await addDoc(collection(firestore, 'chats', chatId, 'messages'), {\r\n            text: formValue,\r\n            timestamp: serverTimestamp(),\r\n            sender: uid,\r\n            photoURL,\r\n        });\r\n\r\n        setFormValue(''); // Clear the message input field\r\n        dummy.current.scrollIntoView({ behavior: 'smooth' }); // Scroll to the bottom after sending a message\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <main>\r\n                <h3>Chat with {friend.username}</h3>\r\n                {messages && messages.map((msg, idx) => <ChatMessage key={idx} message={msg} />)}\r\n                <span ref={dummy}></span>\r\n            </main>\r\n\r\n            <form onSubmit={sendMessage}>\r\n                <input\r\n                    value={formValue}\r\n                    onChange={(e) => setFormValue(e.target.value)}\r\n                    placeholder=\"Type a message\"\r\n                />\r\n                <button type=\"submit\" disabled={!formValue}>\r\n                    Send\r\n                </button>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\n// Component to render each chat message\r\nfunction ChatMessage({ message }) {\r\n    const { text, sender, photoURL } = message;\r\n    const messageClass = sender === auth.currentUser.uid ? 'sent' : 'received';\r\n\r\n    return (\r\n        <div className={`message ${messageClass}`}>\r\n            <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} alt=\"Avatar\" />\r\n            <p>{text}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}