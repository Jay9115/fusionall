{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jay\\\\Desktop\\\\JAY\\\\ss\\\\fusionall\\\\src\\\\components\\\\Materials.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL, listAll } from 'firebase/storage';\nimport { getAuth } from 'firebase/auth';\nimport { collection, query, where, getDocs } from 'firebase/firestore';\nimport { firestore } from './firebase';\nimport GroupList from './GroupList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Materials = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [url, setUrl] = useState('');\n  const [groups, setGroups] = useState([]);\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [fileUrls, setFileUrls] = useState([]);\n\n  // Fetch the groups the user has joined\n  useEffect(() => {\n    const fetchGroups = async () => {\n      const auth = getAuth();\n      const currentUser = auth.currentUser;\n      if (!currentUser) {\n        console.error(\"User is not logged in.\");\n        return;\n      }\n      const groupRef = collection(firestore, 'groups');\n      const groupQuery = query(groupRef, where('groupMembers', 'array-contains', currentUser.uid));\n      const groupSnapshot = await getDocs(groupQuery);\n      const userGroups = groupSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setGroups(userGroups);\n    };\n    fetchGroups();\n  }, []);\n\n  // Handle file selection\n  const handleFileChange = e => {\n    if (e.target.files[0]) {\n      setFile(e.target.files[0]);\n    }\n  };\n\n  // Handle file upload\n  const handleUpload = () => {\n    if (!selectedGroup || !file) {\n      console.error(\"No group selected or no file chosen.\");\n      return;\n    }\n    const storage = getStorage();\n    const auth = getAuth();\n    const storageRef = ref(storage, `groups/${selectedGroup.id}/files/${auth.currentUser.uid}_${file.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, file);\n    uploadTask.on('state_changed', snapshot => {\n      const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      setProgress(progress);\n    }, error => {\n      console.error(\"File upload error:\", error);\n    }, () => {\n      getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n        setUrl(downloadURL);\n        fetchFiles(selectedGroup); // Refresh file list after upload\n      });\n    });\n  };\n\n  // Fetch files for the selected group\n  const fetchFiles = async group => {\n    if (!group) return;\n    const storage = getStorage();\n    const groupFilesRef = ref(storage, `groups/${group.id}/files`);\n    listAll(groupFilesRef).then(res => {\n      const filePromises = res.items.map(async itemRef => {\n        const downloadURL = await getDownloadURL(itemRef);\n        return {\n          name: itemRef.name,\n          url: downloadURL\n        }; // Get file name and URL\n      });\n      return Promise.all(filePromises);\n    }).then(files => setFileUrls(files)).catch(error => console.error('Error fetching files:', error));\n  };\n\n  // Fetch files whenever a new group is selected\n  useEffect(() => {\n    if (selectedGroup) {\n      fetchFiles(selectedGroup);\n    }\n  }, [selectedGroup]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GroupList, {\n      groups: groups,\n      setSelectedGroup: setSelectedGroup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), selectedGroup && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Files for Group: \", selectedGroup.groupName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Progress: \", progress, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Previous Files:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: fileUrls.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: file.url,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: file.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(Materials, \"veTTeO4ObPT0kqN/sfwFxm1qCUI=\");\n_c = Materials;\nexport default Materials;\nvar _c;\n$RefreshReg$(_c, \"Materials\");","map":{"version":3,"names":["React","useState","useEffect","getStorage","ref","uploadBytesResumable","getDownloadURL","listAll","getAuth","collection","query","where","getDocs","firestore","GroupList","jsxDEV","_jsxDEV","Materials","_s","file","setFile","progress","setProgress","url","setUrl","groups","setGroups","selectedGroup","setSelectedGroup","fileUrls","setFileUrls","fetchGroups","auth","currentUser","console","error","groupRef","groupQuery","uid","groupSnapshot","userGroups","docs","map","doc","id","data","handleFileChange","e","target","files","handleUpload","storage","storageRef","name","uploadTask","on","snapshot","bytesTransferred","totalBytes","then","downloadURL","fetchFiles","group","groupFilesRef","res","filePromises","items","itemRef","Promise","all","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","groupName","type","onChange","onClick","index","href","rel","_c","$RefreshReg$"],"sources":["C:/Users/Jay/Desktop/JAY/ss/fusionall/src/components/Materials.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL, listAll } from 'firebase/storage';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { collection, query, where, getDocs } from 'firebase/firestore';\r\nimport { firestore } from './firebase';\r\nimport GroupList from './GroupList';\r\n\r\nconst Materials = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [progress, setProgress] = useState(0);\r\n  const [url, setUrl] = useState('');\r\n  const [groups, setGroups] = useState([]);\r\n  const [selectedGroup, setSelectedGroup] = useState(null);\r\n  const [fileUrls, setFileUrls] = useState([]);\r\n\r\n  // Fetch the groups the user has joined\r\n  useEffect(() => {\r\n    const fetchGroups = async () => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      if (!currentUser) {\r\n        console.error(\"User is not logged in.\");\r\n        return;\r\n      }\r\n\r\n      const groupRef = collection(firestore, 'groups');\r\n      const groupQuery = query(groupRef, where('groupMembers', 'array-contains', currentUser.uid));\r\n      const groupSnapshot = await getDocs(groupQuery);\r\n      const userGroups = groupSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n      setGroups(userGroups);\r\n    };\r\n\r\n    fetchGroups();\r\n  }, []);\r\n\r\n  // Handle file selection\r\n  const handleFileChange = (e) => {\r\n    if (e.target.files[0]) {\r\n      setFile(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  // Handle file upload\r\n  const handleUpload = () => {\r\n    if (!selectedGroup || !file) {\r\n      console.error(\"No group selected or no file chosen.\");\r\n      return;\r\n    }\r\n\r\n    const storage = getStorage();\r\n    const auth = getAuth();\r\n    const storageRef = ref(storage, `groups/${selectedGroup.id}/files/${auth.currentUser.uid}_${file.name}`);\r\n    const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n    uploadTask.on(\r\n      'state_changed',\r\n      (snapshot) => {\r\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n        setProgress(progress);\r\n      },\r\n      (error) => {\r\n        console.error(\"File upload error:\", error);\r\n      },\r\n      () => {\r\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n          setUrl(downloadURL);\r\n          fetchFiles(selectedGroup); // Refresh file list after upload\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  // Fetch files for the selected group\r\n  const fetchFiles = async (group) => {\r\n    if (!group) return;\r\n\r\n    const storage = getStorage();\r\n    const groupFilesRef = ref(storage, `groups/${group.id}/files`);\r\n    \r\n    listAll(groupFilesRef)\r\n      .then((res) => {\r\n        const filePromises = res.items.map(async (itemRef) => {\r\n          const downloadURL = await getDownloadURL(itemRef);\r\n          return { name: itemRef.name, url: downloadURL }; // Get file name and URL\r\n        });\r\n        return Promise.all(filePromises);\r\n      })\r\n      .then((files) => setFileUrls(files))\r\n      .catch((error) => console.error('Error fetching files:', error));\r\n  };\r\n\r\n  // Fetch files whenever a new group is selected\r\n  useEffect(() => {\r\n    if (selectedGroup) {\r\n      fetchFiles(selectedGroup);\r\n    }\r\n  }, [selectedGroup]);\r\n\r\n  return (\r\n    <div>\r\n      {/* Group selection */}\r\n      <GroupList groups={groups} setSelectedGroup={setSelectedGroup} />\r\n      \r\n      {/* File upload and list for selected group */}\r\n      {selectedGroup && (\r\n        <div>\r\n          <h4>Files for Group: {selectedGroup.groupName}</h4>\r\n          <input type=\"file\" onChange={handleFileChange} />\r\n          <button onClick={handleUpload}>Upload</button>\r\n          <p>Progress: {progress}%</p>\r\n          \r\n          <h5>Previous Files:</h5>\r\n          <ul>\r\n            {fileUrls.map((file, index) => (\r\n              \r\n              <li key={index}>\r\n                <a href={file.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  {file.name}\r\n                </a>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Materials;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,EAAEC,GAAG,EAAEC,oBAAoB,EAAEC,cAAc,EAAEC,OAAO,QAAQ,kBAAkB;AACjG,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,QAAQ,oBAAoB;AACtE,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACsB,GAAG,EAAEC,MAAM,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACwB,MAAM,EAAEC,SAAS,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAAC0B,aAAa,EAAEC,gBAAgB,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAAC4B,QAAQ,EAAEC,WAAW,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACd,MAAM6B,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,MAAMC,IAAI,GAAGxB,OAAO,CAAC,CAAC;MACtB,MAAMyB,WAAW,GAAGD,IAAI,CAACC,WAAW;MACpC,IAAI,CAACA,WAAW,EAAE;QAChBC,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC;QACvC;MACF;MAEA,MAAMC,QAAQ,GAAG3B,UAAU,CAACI,SAAS,EAAE,QAAQ,CAAC;MAChD,MAAMwB,UAAU,GAAG3B,KAAK,CAAC0B,QAAQ,EAAEzB,KAAK,CAAC,cAAc,EAAE,gBAAgB,EAAEsB,WAAW,CAACK,GAAG,CAAC,CAAC;MAC5F,MAAMC,aAAa,GAAG,MAAM3B,OAAO,CAACyB,UAAU,CAAC;MAC/C,MAAMG,UAAU,GAAGD,aAAa,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG,KAAK;QAAEC,EAAE,EAAED,GAAG,CAACC,EAAE;QAAE,GAAGD,GAAG,CAACE,IAAI,CAAC;MAAE,CAAC,CAAC,CAAC;MACjFnB,SAAS,CAACc,UAAU,CAAC;IACvB,CAAC;IAEDT,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMe,gBAAgB,GAAIC,CAAC,IAAK;IAC9B,IAAIA,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;MACrB7B,OAAO,CAAC2B,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5B;EACF,CAAC;;EAED;EACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAI,CAACvB,aAAa,IAAI,CAACR,IAAI,EAAE;MAC3Be,OAAO,CAACC,KAAK,CAAC,sCAAsC,CAAC;MACrD;IACF;IAEA,MAAMgB,OAAO,GAAGhD,UAAU,CAAC,CAAC;IAC5B,MAAM6B,IAAI,GAAGxB,OAAO,CAAC,CAAC;IACtB,MAAM4C,UAAU,GAAGhD,GAAG,CAAC+C,OAAO,EAAE,UAAUxB,aAAa,CAACiB,EAAE,UAAUZ,IAAI,CAACC,WAAW,CAACK,GAAG,IAAInB,IAAI,CAACkC,IAAI,EAAE,CAAC;IACxG,MAAMC,UAAU,GAAGjD,oBAAoB,CAAC+C,UAAU,EAAEjC,IAAI,CAAC;IAEzDmC,UAAU,CAACC,EAAE,CACX,eAAe,EACdC,QAAQ,IAAK;MACZ,MAAMnC,QAAQ,GAAImC,QAAQ,CAACC,gBAAgB,GAAGD,QAAQ,CAACE,UAAU,GAAI,GAAG;MACxEpC,WAAW,CAACD,QAAQ,CAAC;IACvB,CAAC,EACAc,KAAK,IAAK;MACTD,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C,CAAC,EACD,MAAM;MACJ7B,cAAc,CAACgD,UAAU,CAACE,QAAQ,CAACpD,GAAG,CAAC,CAACuD,IAAI,CAAEC,WAAW,IAAK;QAC5DpC,MAAM,CAACoC,WAAW,CAAC;QACnBC,UAAU,CAAClC,aAAa,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC;IACJ,CACF,CAAC;EACH,CAAC;;EAED;EACA,MAAMkC,UAAU,GAAG,MAAOC,KAAK,IAAK;IAClC,IAAI,CAACA,KAAK,EAAE;IAEZ,MAAMX,OAAO,GAAGhD,UAAU,CAAC,CAAC;IAC5B,MAAM4D,aAAa,GAAG3D,GAAG,CAAC+C,OAAO,EAAE,UAAUW,KAAK,CAAClB,EAAE,QAAQ,CAAC;IAE9DrC,OAAO,CAACwD,aAAa,CAAC,CACnBJ,IAAI,CAAEK,GAAG,IAAK;MACb,MAAMC,YAAY,GAAGD,GAAG,CAACE,KAAK,CAACxB,GAAG,CAAC,MAAOyB,OAAO,IAAK;QACpD,MAAMP,WAAW,GAAG,MAAMtD,cAAc,CAAC6D,OAAO,CAAC;QACjD,OAAO;UAAEd,IAAI,EAAEc,OAAO,CAACd,IAAI;UAAE9B,GAAG,EAAEqC;QAAY,CAAC,CAAC,CAAC;MACnD,CAAC,CAAC;MACF,OAAOQ,OAAO,CAACC,GAAG,CAACJ,YAAY,CAAC;IAClC,CAAC,CAAC,CACDN,IAAI,CAAEV,KAAK,IAAKnB,WAAW,CAACmB,KAAK,CAAC,CAAC,CACnCqB,KAAK,CAAEnC,KAAK,IAAKD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC;EACpE,CAAC;;EAED;EACAjC,SAAS,CAAC,MAAM;IACd,IAAIyB,aAAa,EAAE;MACjBkC,UAAU,CAAClC,aAAa,CAAC;IAC3B;EACF,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnB,oBACEX,OAAA;IAAAuD,QAAA,gBAEEvD,OAAA,CAACF,SAAS;MAACW,MAAM,EAAEA,MAAO;MAACG,gBAAgB,EAAEA;IAAiB;MAAA4C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAGhEhD,aAAa,iBACZX,OAAA;MAAAuD,QAAA,gBACEvD,OAAA;QAAAuD,QAAA,GAAI,mBAAiB,EAAC5C,aAAa,CAACiD,SAAS;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACnD3D,OAAA;QAAO6D,IAAI,EAAC,MAAM;QAACC,QAAQ,EAAEhC;MAAiB;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjD3D,OAAA;QAAQ+D,OAAO,EAAE7B,YAAa;QAAAqB,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC9C3D,OAAA;QAAAuD,QAAA,GAAG,YAAU,EAAClD,QAAQ,EAAC,GAAC;MAAA;QAAAmD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAE5B3D,OAAA;QAAAuD,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxB3D,OAAA;QAAAuD,QAAA,EACG1C,QAAQ,CAACa,GAAG,CAAC,CAACvB,IAAI,EAAE6D,KAAK,kBAExBhE,OAAA;UAAAuD,QAAA,eACEvD,OAAA;YAAGiE,IAAI,EAAE9D,IAAI,CAACI,GAAI;YAACyB,MAAM,EAAC,QAAQ;YAACkC,GAAG,EAAC,qBAAqB;YAAAX,QAAA,EACzDpD,IAAI,CAACkC;UAAI;YAAAmB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT;QAAC,GAHGK,KAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACzD,EAAA,CAvHID,SAAS;AAAAkE,EAAA,GAATlE,SAAS;AAyHf,eAAeA,SAAS;AAAC,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}