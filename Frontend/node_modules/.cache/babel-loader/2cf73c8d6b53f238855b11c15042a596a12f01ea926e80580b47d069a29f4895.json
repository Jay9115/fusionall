{"ast":null,"code":"var _jsxFileName = \"D:\\\\SGP\\\\fusionall\\\\src\\\\components\\\\PrivateChat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport { auth } from './firebase';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction PrivateChat({\n  friend,\n  setSelectedFriend\n}) {\n  _s();\n  const currentUser = auth.currentUser;\n  const dummy = useRef();\n  const [formValue, setFormValue] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [selectMode, setSelectMode] = useState(false);\n  const [selectedMessages, setSelectedMessages] = useState([]);\n  const chatId = [currentUser.uid, friend.uid].sort().join('_');\n\n  // Fetch messages from backend\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const res = await fetch(`http://localhost:5000/api/chat/messages/${currentUser.uid}/${friend.uid}`);\n      if (res.ok) {\n        const data = await res.json();\n        setMessages(data);\n        setTimeout(() => {\n          if (dummy.current) dummy.current.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }, 100);\n      }\n    };\n    fetchMessages();\n    // Optionally, set up polling or websockets for real-time updates\n  }, [chatId]);\n  const sendMessage = async e => {\n    e.preventDefault();\n    const {\n      uid,\n      photoURL\n    } = currentUser;\n    const res = await fetch('http://localhost:5000/api/chat/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        senderUid: uid,\n        receiverUid: friend.uid,\n        text: formValue,\n        photoURL\n      })\n    });\n    if (res.ok) {\n      setFormValue('');\n      // Re-fetch messages\n      const updated = await fetch(`http://localhost:5000/api/chat/messages/${currentUser.uid}/${friend.uid}`);\n      if (updated.ok) setMessages(await updated.json());\n      setTimeout(() => {\n        if (dummy.current) dummy.current.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }, 100);\n    }\n  };\n  const toggleSelectMode = () => {\n    setSelectMode(!selectMode);\n    setSelectedMessages([]);\n  };\n  const toggleSelectMessage = id => {\n    setSelectedMessages(prev => prev.includes(id) ? prev.filter(msgId => msgId !== id) : [...prev, id]);\n  };\n  const handleDeleteSelected = async () => {\n    await fetch('http://localhost:5000/api/chat/messages', {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        uid1: currentUser.uid,\n        uid2: friend.uid,\n        messageIds: selectedMessages\n      })\n    });\n    // Re-fetch messages\n    const updated = await fetch(`http://localhost:5000/api/chat/messages/${currentUser.uid}/${friend.uid}`);\n    if (updated.ok) setMessages(await updated.json());\n    setSelectedMessages([]);\n    setSelectMode(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Chat with \", friend.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-buttons\",\n          onClick: () => setSelectedFriend(null),\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-buttons\",\n          onClick: toggleSelectMode,\n          children: \"\\u22EE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), selectMode && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleDeleteSelected,\n            disabled: selectedMessages.length === 0,\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleSelectMode,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [messages && messages.map(msg => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        message: msg,\n        chatId: chatId,\n        selectMode: selectMode,\n        selected: selectedMessages.includes(msg.id),\n        onSelect: () => toggleSelectMessage(msg.id)\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n        ref: dummy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: formValue,\n        onChange: e => setFormValue(e.target.value),\n        placeholder: \"Type a message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !formValue,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(PrivateChat, \"jZENLMIqqhBwX3bZaGilUzAcFD0=\");\n_c = PrivateChat;\nfunction ChatMessage({\n  message,\n  selectMode,\n  selected,\n  onSelect\n}) {\n  const {\n    text,\n    sender,\n    photoURL\n  } = message;\n  const messageClass = sender === auth.currentUser.uid ? 'sent' : 'received';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message ${messageClass} ${selected ? 'selected' : ''}`,\n    onClick: selectMode ? onSelect : null,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png',\n      alt: \"Avatar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), selectMode && /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: selected,\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n}\n_c2 = ChatMessage;\nexport default PrivateChat;\nvar _c, _c2;\n$RefreshReg$(_c, \"PrivateChat\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["React","useRef","useState","useEffect","auth","jsxDEV","_jsxDEV","Fragment","_Fragment","PrivateChat","friend","setSelectedFriend","_s","currentUser","dummy","formValue","setFormValue","messages","setMessages","selectMode","setSelectMode","selectedMessages","setSelectedMessages","chatId","uid","sort","join","fetchMessages","res","fetch","ok","data","json","setTimeout","current","scrollIntoView","behavior","sendMessage","e","preventDefault","photoURL","method","headers","body","JSON","stringify","senderUid","receiverUid","text","updated","toggleSelectMode","toggleSelectMessage","id","prev","includes","filter","msgId","handleDeleteSelected","uid1","uid2","messageIds","children","username","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","disabled","length","map","msg","ChatMessage","message","selected","onSelect","ref","onSubmit","value","onChange","target","placeholder","type","_c","sender","messageClass","src","alt","checked","readOnly","_c2","$RefreshReg$"],"sources":["D:/SGP/fusionall/src/components/PrivateChat.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport { auth } from './firebase';\r\n\r\nfunction PrivateChat({ friend, setSelectedFriend }) {\r\n    const currentUser = auth.currentUser;\r\n    const dummy = useRef();\r\n    const [formValue, setFormValue] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [selectMode, setSelectMode] = useState(false);\r\n    const [selectedMessages, setSelectedMessages] = useState([]);\r\n    const chatId = [currentUser.uid, friend.uid].sort().join('_');\r\n\r\n    // Fetch messages from backend\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            const res = await fetch(`http://localhost:5000/api/chat/messages/${currentUser.uid}/${friend.uid}`);\r\n            if (res.ok) {\r\n                const data = await res.json();\r\n                setMessages(data);\r\n                setTimeout(() => {\r\n                    if (dummy.current) dummy.current.scrollIntoView({ behavior: 'smooth' });\r\n                }, 100);\r\n            }\r\n        };\r\n        fetchMessages();\r\n        // Optionally, set up polling or websockets for real-time updates\r\n    }, [chatId]);\r\n\r\n    const sendMessage = async (e) => {\r\n        e.preventDefault();\r\n        const { uid, photoURL } = currentUser;\r\n\r\n        const res = await fetch('http://localhost:5000/api/chat/messages', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                senderUid: uid,\r\n                receiverUid: friend.uid,\r\n                text: formValue,\r\n                photoURL,\r\n            }),\r\n        });\r\n        if (res.ok) {\r\n            setFormValue('');\r\n            // Re-fetch messages\r\n            const updated = await fetch(`http://localhost:5000/api/chat/messages/${currentUser.uid}/${friend.uid}`);\r\n            if (updated.ok) setMessages(await updated.json());\r\n            setTimeout(() => {\r\n                if (dummy.current) dummy.current.scrollIntoView({ behavior: 'smooth' });\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    const toggleSelectMode = () => {\r\n        setSelectMode(!selectMode);\r\n        setSelectedMessages([]);\r\n    };\r\n\r\n    const toggleSelectMessage = (id) => {\r\n        setSelectedMessages((prev) =>\r\n            prev.includes(id) ? prev.filter((msgId) => msgId !== id) : [...prev, id]\r\n        );\r\n    };\r\n\r\n    const handleDeleteSelected = async () => {\r\n        await fetch('http://localhost:5000/api/chat/messages', {\r\n            method: 'DELETE',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                uid1: currentUser.uid,\r\n                uid2: friend.uid,\r\n                messageIds: selectedMessages,\r\n            }),\r\n        });\r\n        // Re-fetch messages\r\n        const updated = await fetch(`http://localhost:5000/api/chat/messages/${currentUser.uid}/${friend.uid}`);\r\n        if (updated.ok) setMessages(await updated.json());\r\n        setSelectedMessages([]);\r\n        setSelectMode(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <header>\r\n                <h3>Chat with {friend.username}</h3>\r\n                <div className=\"options\">\r\n                    <button className=\"back-buttons\" onClick={() => setSelectedFriend(null)}>Back</button>\r\n                    <button className=\"back-buttons\" onClick={toggleSelectMode}>⋮</button>\r\n                    {selectMode && (\r\n                        <div className=\"dropdown\">\r\n                            <button onClick={handleDeleteSelected} disabled={selectedMessages.length === 0}>\r\n                                Delete\r\n                            </button>\r\n                            <button onClick={toggleSelectMode}>Cancel</button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </header>\r\n            <main>\r\n                {messages && messages.map((msg) => (\r\n                    <ChatMessage\r\n                        key={msg.id}\r\n                        message={msg}\r\n                        chatId={chatId}\r\n                        selectMode={selectMode}\r\n                        selected={selectedMessages.includes(msg.id)}\r\n                        onSelect={() => toggleSelectMessage(msg.id)}\r\n                    />\r\n                ))}\r\n                <span ref={dummy}></span>\r\n            </main>\r\n            <form onSubmit={sendMessage}>\r\n                <input\r\n                    value={formValue}\r\n                    onChange={(e) => setFormValue(e.target.value)}\r\n                    placeholder=\"Type a message\"\r\n                />\r\n                <button type=\"submit\" disabled={!formValue}>\r\n                    Send\r\n                </button>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction ChatMessage({ message, selectMode, selected, onSelect }) {\r\n    const { text, sender, photoURL } = message;\r\n    const messageClass = sender === auth.currentUser.uid ? 'sent' : 'received';\r\n\r\n    return (\r\n        <div className={`message ${messageClass} ${selected ? 'selected' : ''}`} onClick={selectMode ? onSelect : null}>\r\n            <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} alt=\"Avatar\" />\r\n            <p>{text}</p>\r\n            {selectMode && (\r\n                <input type=\"checkbox\" checked={selected} readOnly />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PrivateChat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}