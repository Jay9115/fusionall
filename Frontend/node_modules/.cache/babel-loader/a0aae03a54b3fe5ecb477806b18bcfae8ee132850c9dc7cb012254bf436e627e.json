{"ast":null,"code":"var _jsxFileName = \"D:\\\\SGP\\\\fusionall\\\\src\\\\components\\\\AuthButtons.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './AuthButtons.css';\nimport { signInWithPopup, GoogleAuthProvider, signOut } from 'firebase/auth';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { auth } from './firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthButtons() {\n  _s();\n  const [user] = useAuthState(auth);\n\n  // Function to handle sign-in with Google\n  const signInWithGoogle = async () => {\n    const provider = new GoogleAuthProvider();\n    const result = await signInWithPopup(auth, provider);\n    const user = result.user;\n\n    // Send user info to backend\n    const response = await fetch('http://localhost:5000/api/auth/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        uid: user.uid,\n        email: user.email,\n        username: user.displayName // or prompt for a username if needed\n      })\n    });\n    if (!response.ok) {\n      const data = await response.json();\n      alert(data.error || 'Registration failed');\n    }\n  };\n\n  // Function to handle sign-out\n  const signOutUser = () => {\n    signOut(auth);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-buttons-container\",\n    children: user ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"auth-btn auth-sign-out\",\n      onClick: signOutUser,\n      children: \"Sign Out\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"auth-btn auth-sign-in\",\n      onClick: signInWithGoogle,\n      children: \"Sign in with Google\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n_s(AuthButtons, \"hP/7NvzUIXfxIpRVjMlmHSnysKo=\", false, function () {\n  return [useAuthState];\n});\n_c = AuthButtons;\nexport default AuthButtons;\nvar _c;\n$RefreshReg$(_c, \"AuthButtons\");","map":{"version":3,"names":["React","signInWithPopup","GoogleAuthProvider","signOut","useAuthState","auth","jsxDEV","_jsxDEV","AuthButtons","_s","user","signInWithGoogle","provider","result","response","fetch","method","headers","body","JSON","stringify","uid","email","username","displayName","ok","data","json","alert","error","signOutUser","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/SGP/fusionall/src/components/AuthButtons.jsx"],"sourcesContent":["import React from 'react';\r\nimport './AuthButtons.css';\r\nimport { signInWithPopup, GoogleAuthProvider, signOut } from 'firebase/auth';\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { auth } from './firebase';\r\n\r\nfunction AuthButtons() {\r\n    const [user] = useAuthState(auth);\r\n\r\n    // Function to handle sign-in with Google\r\n    const signInWithGoogle = async () => {\r\n        const provider = new GoogleAuthProvider();\r\n        const result = await signInWithPopup(auth, provider);\r\n        const user = result.user;\r\n\r\n        // Send user info to backend\r\n        const response = await fetch('http://localhost:5000/api/auth/register', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                uid: user.uid,\r\n                email: user.email,\r\n                username: user.displayName // or prompt for a username if needed\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const data = await response.json();\r\n            alert(data.error || 'Registration failed');\r\n        }\r\n    };\r\n\r\n    // Function to handle sign-out\r\n    const signOutUser = () => {\r\n        signOut(auth);\r\n    };\r\n\r\n    return (\r\n        <div className=\"auth-buttons-container\">\r\n            {user ? (\r\n                <button className=\"auth-btn auth-sign-out\" onClick={signOutUser}>Sign Out</button>\r\n            ) : (\r\n                <button className=\"auth-btn auth-sign-in\" onClick={signInWithGoogle}>Sign in with Google</button>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AuthButtons;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,mBAAmB;AAC1B,SAASC,eAAe,EAAEC,kBAAkB,EAAEC,OAAO,QAAQ,eAAe;AAC5E,SAASC,YAAY,QAAQ,2BAA2B;AACxD,SAASC,IAAI,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,IAAI,CAAC,GAAGN,YAAY,CAACC,IAAI,CAAC;;EAEjC;EACA,MAAMM,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMC,QAAQ,GAAG,IAAIV,kBAAkB,CAAC,CAAC;IACzC,MAAMW,MAAM,GAAG,MAAMZ,eAAe,CAACI,IAAI,EAAEO,QAAQ,CAAC;IACpD,MAAMF,IAAI,GAAGG,MAAM,CAACH,IAAI;;IAExB;IACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;MACpEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,GAAG,EAAEX,IAAI,CAACW,GAAG;QACbC,KAAK,EAAEZ,IAAI,CAACY,KAAK;QACjBC,QAAQ,EAAEb,IAAI,CAACc,WAAW,CAAC;MAC/B,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACV,QAAQ,CAACW,EAAE,EAAE;MACd,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;MAClCC,KAAK,CAACF,IAAI,CAACG,KAAK,IAAI,qBAAqB,CAAC;IAC9C;EACJ,CAAC;;EAED;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACtB3B,OAAO,CAACE,IAAI,CAAC;EACjB,CAAC;EAED,oBACIE,OAAA;IAAKwB,SAAS,EAAC,wBAAwB;IAAAC,QAAA,EAClCtB,IAAI,gBACDH,OAAA;MAAQwB,SAAS,EAAC,wBAAwB;MAACE,OAAO,EAAEH,WAAY;MAAAE,QAAA,EAAC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,gBAElF9B,OAAA;MAAQwB,SAAS,EAAC,uBAAuB;MAACE,OAAO,EAAEtB,gBAAiB;MAAAqB,QAAA,EAAC;IAAmB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EACnG;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAAC5B,EAAA,CAxCQD,WAAW;EAAA,QACDJ,YAAY;AAAA;AAAAkC,EAAA,GADtB9B,WAAW;AA0CpB,eAAeA,WAAW;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}