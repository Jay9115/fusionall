{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jay\\\\Desktop\\\\JAY\\\\ss\\\\fusionall\\\\src\\\\components\\\\chat.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport './chat.css';\nimport { collection, addDoc, orderBy, query, getDocs, serverTimestamp, doc, getDoc } from 'firebase/firestore';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { auth, firestore } from './firebase';\nimport AuthButtons from \"./AuthButtons\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [user] = useAuthState(auth);\n  const [selectedFriend, setSelectedFriend] = useState(null); // Selected friend's private chat\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: user ? selectedFriend ? /*#__PURE__*/_jsxDEV(PrivateChat, {\n        friend: selectedFriend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(FriendsList, {\n        setSelectedFriend: setSelectedFriend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(AuthButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n}\n\n// Component to display the user's friends\n_s(Chat, \"r6IOPMAJDKpBOH52apaIq7LIdWc=\", false, function () {\n  return [useAuthState];\n});\n_c = Chat;\nfunction FriendsList({\n  setSelectedFriend\n}) {\n  _s2();\n  const [friends, setFriends] = useState([]);\n  useEffect(() => {\n    const fetchFriends = async () => {\n      const currentUser = auth.currentUser;\n      if (currentUser) {\n        const userDocRef = doc(firestore, 'users', currentUser.uid);\n        const userSnapshot = await getDoc(userDocRef); // Use `getDoc` for a single document\n\n        if (userSnapshot.exists()) {\n          const userData = userSnapshot.data();\n          if (userData.friends) {\n            setFriends(userData.friends);\n          }\n        }\n      }\n    };\n    fetchFriends();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"friends-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Your Friends\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), friends.length > 0 ? friends.map(friendUid => /*#__PURE__*/_jsxDEV(FriendItem, {\n      friendUid: friendUid,\n      setSelectedFriend: setSelectedFriend\n    }, friendUid, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No friends yet. Add some!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n// Component to display each friend's name\n_s2(FriendsList, \"QwbMuLO2kqwKmE9hi2K1MX3vzvc=\");\n_c2 = FriendsList;\nfunction FriendItem({\n  friendUid,\n  setSelectedFriend\n}) {\n  _s3();\n  const [friendData, setFriendData] = useState(null);\n  useEffect(() => {\n    const fetchFriendData = async () => {\n      const friendDocRef = doc(firestore, 'users', friendUid);\n      const friendSnapshot = await getDoc(friendDocRef);\n      setFriendData(friendSnapshot.data());\n    };\n    fetchFriendData();\n  }, [friendUid]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"friend-item\",\n    onClick: () => setSelectedFriend(friendData),\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: (friendData === null || friendData === void 0 ? void 0 : friendData.username) || 'Loading...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n\n// Private chat component between the current user and a friend\n_s3(FriendItem, \"E4XiZNKUHzH6x9uX3P099lBVNTU=\");\n_c3 = FriendItem;\nfunction PrivateChat({\n  friend\n}) {\n  _s4();\n  const currentUser = auth.currentUser;\n  const dummy = useRef();\n  const [formValue, setFormValue] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  // Create a consistent chatId using both users' UIDs\n  const chatId = [currentUser.uid, friend.uid].sort().join('_'); // Sorting ensures both user UIDs form the same chatId\n\n  // Fetch chat messages between the current user and the selected friend\n  useEffect(() => {\n    const messagesRef = collection(firestore, 'chats', chatId, 'messages');\n    const q = query(messagesRef, orderBy('timestamp'));\n\n    // Use onSnapshot to listen for real-time updates\n    const unsubscribe = onSnapshot(q, querySnapshot => {\n      const messagesData = [];\n      querySnapshot.forEach(doc => {\n        messagesData.push(doc.data());\n      });\n      setMessages(messagesData); // Set the fetched messages to state\n      dummy.current.scrollIntoView({\n        behavior: 'smooth'\n      }); // Scroll to the bottom when new messages arrive\n    });\n\n    // Cleanup the subscription on unmount\n    return () => unsubscribe();\n  }, [chatId]);\n  const sendMessage = async e => {\n    e.preventDefault();\n    const {\n      uid,\n      photoURL\n    } = currentUser;\n\n    // Add the new message to Firestore\n    await addDoc(collection(firestore, 'chats', chatId, 'messages'), {\n      text: formValue,\n      timestamp: serverTimestamp(),\n      sender: uid,\n      photoURL\n    });\n    setFormValue(''); // Clear the message input field\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Chat with \", friend.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), messages && messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        message: msg\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 57\n      }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n        ref: dummy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: formValue,\n        onChange: e => setFormValue(e.target.value),\n        placeholder: \"Type a message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !formValue,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n// Component to render each chat message\n_s4(PrivateChat, \"+gZE8lhWWaU1iHUOKBBZEA1lf9s=\");\n_c4 = PrivateChat;\nfunction ChatMessage({\n  message\n}) {\n  const {\n    text,\n    sender,\n    photoURL\n  } = message;\n  const messageClass = sender === auth.currentUser.uid ? 'sent' : 'received';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message ${messageClass}`,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png',\n      alt: \"Avatar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n_c5 = ChatMessage;\nexport default Chat;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Chat\");\n$RefreshReg$(_c2, \"FriendsList\");\n$RefreshReg$(_c3, \"FriendItem\");\n$RefreshReg$(_c4, \"PrivateChat\");\n$RefreshReg$(_c5, \"ChatMessage\");","map":{"version":3,"names":["React","useRef","useState","useEffect","collection","addDoc","orderBy","query","getDocs","serverTimestamp","doc","getDoc","useAuthState","auth","firestore","AuthButtons","jsxDEV","_jsxDEV","Fragment","_Fragment","Chat","_s","user","selectedFriend","setSelectedFriend","className","children","PrivateChat","friend","fileName","_jsxFileName","lineNumber","columnNumber","FriendsList","_c","_s2","friends","setFriends","fetchFriends","currentUser","userDocRef","uid","userSnapshot","exists","userData","data","length","map","friendUid","FriendItem","_c2","_s3","friendData","setFriendData","fetchFriendData","friendDocRef","friendSnapshot","onClick","username","_c3","_s4","dummy","formValue","setFormValue","messages","setMessages","chatId","sort","join","messagesRef","q","unsubscribe","onSnapshot","querySnapshot","messagesData","forEach","push","current","scrollIntoView","behavior","sendMessage","e","preventDefault","photoURL","text","timestamp","sender","msg","idx","ChatMessage","message","ref","onSubmit","value","onChange","target","placeholder","type","disabled","_c4","messageClass","src","alt","_c5","$RefreshReg$"],"sources":["C:/Users/Jay/Desktop/JAY/ss/fusionall/src/components/chat.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport './chat.css';\r\nimport { collection, addDoc, orderBy, query, getDocs, serverTimestamp, doc, getDoc } from 'firebase/firestore';\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { auth, firestore } from './firebase';\r\nimport AuthButtons from \"./AuthButtons\";\r\n\r\nfunction Chat() {\r\n    const [user] = useAuthState(auth);\r\n    const [selectedFriend, setSelectedFriend] = useState(null); // Selected friend's private chat\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <section>\r\n                {user ? (\r\n                    selectedFriend ? (\r\n                        <PrivateChat friend={selectedFriend} />\r\n                    ) : (\r\n                        <FriendsList setSelectedFriend={setSelectedFriend} />\r\n                    )\r\n                ) : (\r\n                    <AuthButtons />\r\n                )}\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\n// Component to display the user's friends\r\nfunction FriendsList({ setSelectedFriend }) {\r\n    const [friends, setFriends] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchFriends = async () => {\r\n            const currentUser = auth.currentUser;\r\n            if (currentUser) {\r\n                const userDocRef = doc(firestore, 'users', currentUser.uid);\r\n                const userSnapshot = await getDoc(userDocRef); // Use `getDoc` for a single document\r\n\r\n                if (userSnapshot.exists()) {\r\n                    const userData = userSnapshot.data();\r\n                    if (userData.friends) {\r\n                        setFriends(userData.friends);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        fetchFriends();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"friends-list\">\r\n            <h3>Your Friends</h3>\r\n            {friends.length > 0 ? (\r\n                friends.map((friendUid) => (\r\n                    <FriendItem key={friendUid} friendUid={friendUid} setSelectedFriend={setSelectedFriend} />\r\n                ))\r\n            ) : (\r\n                <p>No friends yet. Add some!</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n// Component to display each friend's name\r\nfunction FriendItem({ friendUid, setSelectedFriend }) {\r\n    const [friendData, setFriendData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchFriendData = async () => {\r\n            const friendDocRef = doc(firestore, 'users', friendUid);\r\n            const friendSnapshot = await getDoc(friendDocRef);\r\n            setFriendData(friendSnapshot.data());\r\n        };\r\n\r\n        fetchFriendData();\r\n    }, [friendUid]);\r\n\r\n    return (\r\n        <div className=\"friend-item\" onClick={() => setSelectedFriend(friendData)}>\r\n            <p>{friendData?.username || 'Loading...'}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\n// Private chat component between the current user and a friend\r\nfunction PrivateChat({ friend }) {\r\n    const currentUser = auth.currentUser;\r\n    const dummy = useRef();\r\n    const [formValue, setFormValue] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    // Create a consistent chatId using both users' UIDs\r\n    const chatId = [currentUser.uid, friend.uid].sort().join('_'); // Sorting ensures both user UIDs form the same chatId\r\n\r\n    // Fetch chat messages between the current user and the selected friend\r\n    useEffect(() => {\r\n        const messagesRef = collection(firestore, 'chats', chatId, 'messages');\r\n        const q = query(messagesRef, orderBy('timestamp'));\r\n\r\n        // Use onSnapshot to listen for real-time updates\r\n        const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n            const messagesData = [];\r\n            querySnapshot.forEach((doc) => {\r\n                messagesData.push(doc.data());\r\n            });\r\n            setMessages(messagesData); // Set the fetched messages to state\r\n            dummy.current.scrollIntoView({ behavior: 'smooth' }); // Scroll to the bottom when new messages arrive\r\n        });\r\n\r\n        // Cleanup the subscription on unmount\r\n        return () => unsubscribe();\r\n    }, [chatId]);\r\n\r\n    const sendMessage = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const { uid, photoURL } = currentUser;\r\n\r\n        // Add the new message to Firestore\r\n        await addDoc(collection(firestore, 'chats', chatId, 'messages'), {\r\n            text: formValue,\r\n            timestamp: serverTimestamp(),\r\n            sender: uid,\r\n            photoURL,\r\n        });\r\n\r\n        setFormValue(''); // Clear the message input field\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <main>\r\n                <h3>Chat with {friend.username}</h3>\r\n                {messages && messages.map((msg, idx) => <ChatMessage key={idx} message={msg} />)}\r\n                <span ref={dummy}></span>\r\n            </main>\r\n\r\n            <form onSubmit={sendMessage}>\r\n                <input\r\n                    value={formValue}\r\n                    onChange={(e) => setFormValue(e.target.value)}\r\n                    placeholder=\"Type a message\"\r\n                />\r\n                <button type=\"submit\" disabled={!formValue}>\r\n                    Send\r\n                </button>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\n// Component to render each chat message\r\nfunction ChatMessage({ message }) {\r\n    const { text, sender, photoURL } = message;\r\n    const messageClass = sender === auth.currentUser.uid ? 'sent' : 'received';\r\n\r\n    return (\r\n        <div className={`message ${messageClass}`}>\r\n            <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} alt=\"Avatar\" />\r\n            <p>{text}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}