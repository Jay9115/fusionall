{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jay\\\\Desktop\\\\JAY\\\\ss\\\\fusionall\\\\src\\\\components\\\\group.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport GroupList from './GroupList'; // List of groups component\nimport GroupChat from './GroupChat'; // Group chat component\nimport GroupCreation from './GroupCreation'; // Group creation modal\nimport { auth, firestore } from './firebase';\nimport { collection, query, where, getDocs, addDoc, serverTimestamp } from 'firebase/firestore'; // Firebase v9 functions\n\n// import { firestore, auth } from './firebase'; // Firebase utilities\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Group() {\n  _s();\n  const [groups, setGroups] = useState([]);\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [showGroupModal, setShowGroupModal] = useState(false);\n\n  // Fetch the user's groups from Firestorey\n  useEffect(() => {\n    const fetchGroups = async () => {\n      const currentUser = auth.currentUser;\n      const groupQuery = firestore.collection('groups').where('groupMembers', 'array-contains', currentUser.uid);\n      const groupSnapshot = await groupQuery.get();\n      const userGroups = groupSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setGroups(userGroups);\n    };\n    fetchGroups();\n  }, []);\n\n  // Function to handle group creation\n  const createGroup = async (groupName, selectedFriends) => {\n    const currentUser = auth.currentUser;\n    const groupData = {\n      groupName,\n      groupMembers: [...selectedFriends, currentUser.uid],\n      createdAt: new Date(),\n      createdBy: currentUser.uid\n    };\n\n    // Add group to Firestore\n    const groupRef = await firestore.collection('groups').add(groupData);\n    const newGroup = {\n      id: groupRef.id,\n      ...groupData\n    };\n    setGroups([...groups, newGroup]); // Update the group list\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(GroupList, {\n      groups: groups,\n      setSelectedGroup: setSelectedGroup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), selectedGroup ? /*#__PURE__*/_jsxDEV(GroupChat, {\n      groupId: selectedGroup.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-group-message\",\n      children: \"Select a group to start chatting!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-group-btn\",\n      onClick: () => setShowGroupModal(true),\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), showGroupModal && /*#__PURE__*/_jsxDEV(GroupCreation, {\n      friends: [] // Pass friends list here\n      ,\n      createGroup: createGroup,\n      closeModal: () => setShowGroupModal(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(Group, \"ndxrlm7ABalt9gx2gpo5pH9ptqU=\");\n_c = Group;\nexport default Group;\nvar _c;\n$RefreshReg$(_c, \"Group\");","map":{"version":3,"names":["React","useRef","useState","useEffect","GroupList","GroupChat","GroupCreation","auth","firestore","collection","query","where","getDocs","addDoc","serverTimestamp","jsxDEV","_jsxDEV","Group","_s","groups","setGroups","selectedGroup","setSelectedGroup","showGroupModal","setShowGroupModal","fetchGroups","currentUser","groupQuery","uid","groupSnapshot","get","userGroups","docs","map","doc","id","data","createGroup","groupName","selectedFriends","groupData","groupMembers","createdAt","Date","createdBy","groupRef","add","newGroup","className","children","fileName","_jsxFileName","lineNumber","columnNumber","groupId","onClick","friends","closeModal","_c","$RefreshReg$"],"sources":["C:/Users/Jay/Desktop/JAY/ss/fusionall/src/components/group.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport GroupList from './GroupList'; // List of groups component\r\nimport GroupChat from './GroupChat'; // Group chat component\r\nimport GroupCreation from './GroupCreation'; // Group creation modal\r\nimport { auth, firestore } from './firebase';\r\nimport { collection, query, where, getDocs, addDoc, serverTimestamp } from 'firebase/firestore'; // Firebase v9 functions\r\n\r\n// import { firestore, auth } from './firebase'; // Firebase utilities\r\n\r\n\r\n\r\nfunction Group() {\r\n    const [groups, setGroups] = useState([]);\r\n    const [selectedGroup, setSelectedGroup] = useState(null);\r\n    const [showGroupModal, setShowGroupModal] = useState(false);\r\n\r\n    // Fetch the user's groups from Firestorey\r\n    useEffect(() => {\r\n        const fetchGroups = async () => {\r\n            const currentUser = auth.currentUser;\r\n            const groupQuery = firestore.collection('groups').where('groupMembers', 'array-contains', currentUser.uid);\r\n            const groupSnapshot = await groupQuery.get();\r\n            const userGroups = groupSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n            setGroups(userGroups);\r\n        };\r\n\r\n        fetchGroups();\r\n    }, []);\r\n\r\n    // Function to handle group creation\r\n    const createGroup = async (groupName, selectedFriends) => {\r\n        const currentUser = auth.currentUser;\r\n        const groupData = {\r\n            groupName,\r\n            groupMembers: [...selectedFriends, currentUser.uid],\r\n            createdAt: new Date(),\r\n            createdBy: currentUser.uid\r\n        };\r\n\r\n        // Add group to Firestore\r\n        const groupRef = await firestore.collection('groups').add(groupData);\r\n        const newGroup = { id: groupRef.id, ...groupData };\r\n        setGroups([...groups, newGroup]); // Update the group list\r\n    };\r\n\r\n    return (\r\n        <div className=\"main-page-container\">\r\n            {/* Display list of groups */}\r\n            <GroupList groups={groups} setSelectedGroup={setSelectedGroup} />\r\n\r\n            {/* Display group chat if a group is selected */}\r\n            {selectedGroup ? (\r\n                <GroupChat groupId={selectedGroup.id} />\r\n            ) : (\r\n                <p className=\"no-group-message\">Select a group to start chatting!</p>\r\n            )}\r\n\r\n            {/* Plus symbol for opening the group creation modal */}\r\n            <button className=\"add-group-btn\" onClick={() => setShowGroupModal(true)}>\r\n                +\r\n            </button>\r\n\r\n            {/* Group creation modal */}\r\n            {showGroupModal && (\r\n                <GroupCreation\r\n                    friends={[]} // Pass friends list here\r\n                    createGroup={createGroup}\r\n                    closeModal={() => setShowGroupModal(false)}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Group;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}