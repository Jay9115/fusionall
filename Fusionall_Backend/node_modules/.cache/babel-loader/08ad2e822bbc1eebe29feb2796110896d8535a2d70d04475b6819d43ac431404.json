{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jay\\\\Desktop\\\\JAY\\\\ss\\\\fusionall\\\\src\\\\components\\\\AuthButtons.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './AuthButtons.css';\nimport { signInWithPopup, GoogleAuthProvider, signOut } from 'firebase/auth';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { auth, firestore } from './firebase'; // Import from your firebase setup\nimport { doc, setDoc, getDoc, getDocs, collection } from 'firebase/firestore'; // Firestore functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthButtons() {\n  _s();\n  const [user] = useAuthState(auth);\n\n  // Function to prompt user for a unique username after signing in\n  const promptForUniqueUsername = async () => {\n    const user = auth.currentUser;\n    const userRef = doc(firestore, \"users\", user.uid);\n    const userDoc = await getDoc(userRef);\n    if (!userDoc.exists()) {\n      // Ask for a username if it's a new user\n      let username = prompt(\"Please enter a unique username:\");\n\n      // Check if the username already exists\n      const usersRef = collection(firestore, \"users\");\n      const querySnapshot = await getDocs(usersRef);\n      const usernames = querySnapshot.docs.map(doc => doc.data().username);\n      while (usernames.includes(username)) {\n        username = prompt(\"Username already taken. Please choose another:\");\n      }\n\n      // Save the new user's data with the unique username\n      await setDoc(userRef, {\n        uid: user.uid,\n        email: user.email,\n        username: username,\n        friends: [] // Initialize empty friends list\n      });\n    }\n  };\n\n  // Function to handle sign-in with Google\n  const signInWithGoogle = async () => {\n    const provider = new GoogleAuthProvider();\n    await signInWithPopup(auth, provider);\n\n    // After signing in, prompt the user for a unique username\n    promptForUniqueUsername();\n  };\n\n  // Function to handle sign-out\n  const signOutUser = () => {\n    signOut(auth);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-buttons-container\",\n    children: user ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"auth-btn auth-sign-out\",\n      onClick: signOutUser,\n      children: \"Sign Out\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"auth-btn auth-sign-in\",\n      onClick: signInWithGoogle,\n      children: \"Sign in with Google\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_s(AuthButtons, \"hP/7NvzUIXfxIpRVjMlmHSnysKo=\", false, function () {\n  return [useAuthState];\n});\n_c = AuthButtons;\nexport default AuthButtons;\nvar _c;\n$RefreshReg$(_c, \"AuthButtons\");","map":{"version":3,"names":["React","signInWithPopup","GoogleAuthProvider","signOut","useAuthState","auth","firestore","doc","setDoc","getDoc","getDocs","collection","jsxDEV","_jsxDEV","AuthButtons","_s","user","promptForUniqueUsername","currentUser","userRef","uid","userDoc","exists","username","prompt","usersRef","querySnapshot","usernames","docs","map","data","includes","email","friends","signInWithGoogle","provider","signOutUser","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jay/Desktop/JAY/ss/fusionall/src/components/AuthButtons.jsx"],"sourcesContent":["import React from 'react';\r\nimport './AuthButtons.css';\r\nimport { signInWithPopup, GoogleAuthProvider, signOut } from 'firebase/auth';\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { auth, firestore } from './firebase'; // Import from your firebase setup\r\nimport { doc, setDoc, getDoc, getDocs, collection } from 'firebase/firestore'; // Firestore functions\r\n\r\nfunction AuthButtons() {\r\n    const [user] = useAuthState(auth);\r\n\r\n    // Function to prompt user for a unique username after signing in\r\n    const promptForUniqueUsername = async () => {\r\n        const user = auth.currentUser;\r\n        const userRef = doc(firestore, \"users\", user.uid);\r\n        const userDoc = await getDoc(userRef);\r\n\r\n        if (!userDoc.exists()) {\r\n            // Ask for a username if it's a new user\r\n            let username = prompt(\"Please enter a unique username:\");\r\n\r\n            // Check if the username already exists\r\n            const usersRef = collection(firestore, \"users\");\r\n            const querySnapshot = await getDocs(usersRef);\r\n            const usernames = querySnapshot.docs.map(doc => doc.data().username);\r\n\r\n            while (usernames.includes(username)) {\r\n                username = prompt(\"Username already taken. Please choose another:\");\r\n            }\r\n\r\n            // Save the new user's data with the unique username\r\n            await setDoc(userRef, {\r\n                uid: user.uid,\r\n                email: user.email,\r\n                username: username,\r\n                friends: [] // Initialize empty friends list\r\n            });\r\n        }\r\n    };\r\n\r\n    // Function to handle sign-in with Google\r\n    const signInWithGoogle = async () => {\r\n        const provider = new GoogleAuthProvider();\r\n        await signInWithPopup(auth, provider);\r\n\r\n        // After signing in, prompt the user for a unique username\r\n        promptForUniqueUsername();\r\n    };\r\n\r\n    // Function to handle sign-out\r\n    const signOutUser = () => {\r\n        signOut(auth);\r\n    };\r\n\r\n    return (\r\n        <div className=\"auth-buttons-container\">\r\n            {user ? (\r\n                <button className=\"auth-btn auth-sign-out\" onClick={signOutUser}>Sign Out</button>\r\n            ) : (\r\n                <button className=\"auth-btn auth-sign-in\" onClick={signInWithGoogle}>Sign in with Google</button>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AuthButtons;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,mBAAmB;AAC1B,SAASC,eAAe,EAAEC,kBAAkB,EAAEC,OAAO,QAAQ,eAAe;AAC5E,SAASC,YAAY,QAAQ,2BAA2B;AACxD,SAASC,IAAI,EAAEC,SAAS,QAAQ,YAAY,CAAC,CAAC;AAC9C,SAASC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAEC,UAAU,QAAQ,oBAAoB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/E,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,IAAI,CAAC,GAAGZ,YAAY,CAACC,IAAI,CAAC;;EAEjC;EACA,MAAMY,uBAAuB,GAAG,MAAAA,CAAA,KAAY;IACxC,MAAMD,IAAI,GAAGX,IAAI,CAACa,WAAW;IAC7B,MAAMC,OAAO,GAAGZ,GAAG,CAACD,SAAS,EAAE,OAAO,EAAEU,IAAI,CAACI,GAAG,CAAC;IACjD,MAAMC,OAAO,GAAG,MAAMZ,MAAM,CAACU,OAAO,CAAC;IAErC,IAAI,CAACE,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;MACnB;MACA,IAAIC,QAAQ,GAAGC,MAAM,CAAC,iCAAiC,CAAC;;MAExD;MACA,MAAMC,QAAQ,GAAGd,UAAU,CAACL,SAAS,EAAE,OAAO,CAAC;MAC/C,MAAMoB,aAAa,GAAG,MAAMhB,OAAO,CAACe,QAAQ,CAAC;MAC7C,MAAME,SAAS,GAAGD,aAAa,CAACE,IAAI,CAACC,GAAG,CAACtB,GAAG,IAAIA,GAAG,CAACuB,IAAI,CAAC,CAAC,CAACP,QAAQ,CAAC;MAEpE,OAAOI,SAAS,CAACI,QAAQ,CAACR,QAAQ,CAAC,EAAE;QACjCA,QAAQ,GAAGC,MAAM,CAAC,gDAAgD,CAAC;MACvE;;MAEA;MACA,MAAMhB,MAAM,CAACW,OAAO,EAAE;QAClBC,GAAG,EAAEJ,IAAI,CAACI,GAAG;QACbY,KAAK,EAAEhB,IAAI,CAACgB,KAAK;QACjBT,QAAQ,EAAEA,QAAQ;QAClBU,OAAO,EAAE,EAAE,CAAC;MAChB,CAAC,CAAC;IACN;EACJ,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMC,QAAQ,GAAG,IAAIjC,kBAAkB,CAAC,CAAC;IACzC,MAAMD,eAAe,CAACI,IAAI,EAAE8B,QAAQ,CAAC;;IAErC;IACAlB,uBAAuB,CAAC,CAAC;EAC7B,CAAC;;EAED;EACA,MAAMmB,WAAW,GAAGA,CAAA,KAAM;IACtBjC,OAAO,CAACE,IAAI,CAAC;EACjB,CAAC;EAED,oBACIQ,OAAA;IAAKwB,SAAS,EAAC,wBAAwB;IAAAC,QAAA,EAClCtB,IAAI,gBACDH,OAAA;MAAQwB,SAAS,EAAC,wBAAwB;MAACE,OAAO,EAAEH,WAAY;MAAAE,QAAA,EAAC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,gBAElF9B,OAAA;MAAQwB,SAAS,EAAC,uBAAuB;MAACE,OAAO,EAAEL,gBAAiB;MAAAI,QAAA,EAAC;IAAmB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EACnG;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAAC5B,EAAA,CAvDQD,WAAW;EAAA,QACDV,YAAY;AAAA;AAAAwC,EAAA,GADtB9B,WAAW;AAyDpB,eAAeA,WAAW;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}