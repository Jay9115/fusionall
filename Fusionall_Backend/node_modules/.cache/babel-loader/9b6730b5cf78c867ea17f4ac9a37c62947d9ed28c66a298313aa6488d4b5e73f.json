{"ast":null,"code":"var _jsxFileName = \"D:\\\\fusionall\\\\src\\\\components\\\\group.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport GroupList from './GroupList'; // List of groups component\nimport GroupChat from './GroupChat'; // Group chat component\nimport GroupCreation from './GroupCreation'; // Group creation modal\nimport { auth, firestore } from './firebase';\nimport './group.css';\nimport { collection, query, where, getDocs, addDoc, serverTimestamp } from 'firebase/firestore'; // Firebase v9 functions\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Group() {\n  _s();\n  const [groups, setGroups] = useState([]);\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [showGroupModal, setShowGroupModal] = useState(false);\n\n  // Fetch the user's groups from Firestore\n  useEffect(() => {\n    const fetchGroups = async () => {\n      const currentUser = auth.currentUser;\n      const groupRef = collection(firestore, 'groups');\n      const groupQuery = query(groupRef, where('groupMembers', 'array-contains', currentUser.uid));\n      const groupSnapshot = await getDocs(groupQuery);\n      const userGroups = groupSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setGroups(userGroups);\n    };\n    fetchGroups();\n  }, []);\n\n  // Function to handle group creation\n  const createGroup = async (groupName, selectedFriends) => {\n    const currentUser = auth.currentUser;\n    const groupData = {\n      groupName,\n      groupMembers: [...selectedFriends, currentUser.uid],\n      createdAt: serverTimestamp(),\n      createdBy: currentUser.uid\n    };\n\n    // Add group to Firestore\n    const groupRef = collection(firestore, 'groups');\n    const newGroupRef = await addDoc(groupRef, groupData);\n    setGroups([...groups, {\n      id: newGroupRef.id,\n      ...groupData\n    }]); // Update the group list\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-page-container\",\n    children: [!selectedGroup && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(GroupList, {\n        groups: groups,\n        setSelectedGroup: setSelectedGroup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-group-btn\",\n        onClick: () => setShowGroupModal(true),\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this), showGroupModal && /*#__PURE__*/_jsxDEV(GroupCreation, {\n        friends: [] // Pass friends list here\n        ,\n        createGroup: createGroup,\n        closeModal: () => setShowGroupModal(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true), selectedGroup && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: () => setSelectedGroup(null),\n        children: \"\\u2190 Back to Groups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(GroupChat, {\n        groupId: selectedGroup.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(Group, \"ndxrlm7ABalt9gx2gpo5pH9ptqU=\");\n_c = Group;\nexport default Group;\nvar _c;\n$RefreshReg$(_c, \"Group\");","map":{"version":3,"names":["React","useState","useEffect","GroupList","GroupChat","GroupCreation","auth","firestore","collection","query","where","getDocs","addDoc","serverTimestamp","jsxDEV","_jsxDEV","Fragment","_Fragment","Group","_s","groups","setGroups","selectedGroup","setSelectedGroup","showGroupModal","setShowGroupModal","fetchGroups","currentUser","groupRef","groupQuery","uid","groupSnapshot","userGroups","docs","map","doc","id","data","createGroup","groupName","selectedFriends","groupData","groupMembers","createdAt","createdBy","newGroupRef","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","friends","closeModal","groupId","_c","$RefreshReg$"],"sources":["D:/fusionall/src/components/group.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport GroupList from './GroupList'; // List of groups component\r\nimport GroupChat from './GroupChat'; // Group chat component\r\nimport GroupCreation from './GroupCreation'; // Group creation modal\r\nimport { auth, firestore } from './firebase';\r\nimport './group.css';\r\nimport { collection, query, where, getDocs, addDoc, serverTimestamp } from 'firebase/firestore'; // Firebase v9 functions\r\n\r\nfunction Group() {\r\n    const [groups, setGroups] = useState([]);\r\n    const [selectedGroup, setSelectedGroup] = useState(null);\r\n    const [showGroupModal, setShowGroupModal] = useState(false);\r\n\r\n    // Fetch the user's groups from Firestore\r\n    useEffect(() => {\r\n        const fetchGroups = async () => {\r\n            const currentUser = auth.currentUser;\r\n            const groupRef = collection(firestore, 'groups');\r\n            const groupQuery = query(groupRef, where('groupMembers', 'array-contains', currentUser.uid));\r\n            const groupSnapshot = await getDocs(groupQuery);\r\n            const userGroups = groupSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n            setGroups(userGroups);\r\n        };\r\n\r\n        fetchGroups();\r\n    }, []);\r\n\r\n    // Function to handle group creation\r\n    const createGroup = async (groupName, selectedFriends) => {\r\n        const currentUser = auth.currentUser;\r\n        const groupData = {\r\n            groupName,\r\n            groupMembers: [...selectedFriends, currentUser.uid],\r\n            createdAt: serverTimestamp(),\r\n            createdBy: currentUser.uid\r\n        };\r\n\r\n        // Add group to Firestore\r\n        const groupRef = collection(firestore, 'groups');\r\n        const newGroupRef = await addDoc(groupRef, groupData);\r\n        setGroups([...groups, { id: newGroupRef.id, ...groupData }]); // Update the group list\r\n    };\r\n\r\n    return (\r\n        \r\n        <div className=\"main-page-container\">\r\n            {/* Display list of groups if no group is selected */}\r\n            {!selectedGroup && (\r\n                <>\r\n                    <GroupList groups={groups} setSelectedGroup={setSelectedGroup} />\r\n\r\n                    {/* Plus symbol for opening the group creation modal */}\r\n                    <button className=\"add-group-btn\" onClick={() => setShowGroupModal(true)}>\r\n                        +\r\n                    </button>\r\n\r\n                    {/* Group creation modal */}\r\n                    {showGroupModal && (\r\n                        <GroupCreation\r\n                            friends={[]} // Pass friends list here\r\n                            createGroup={createGroup}\r\n                            closeModal={() => setShowGroupModal(false)}\r\n                        />\r\n                    )}\r\n                </>\r\n            )}\r\n\r\n            {/* Display group chat if a group is selected */}\r\n            {selectedGroup && (\r\n                <>\r\n                    <button className=\"back-button\" onClick={() => setSelectedGroup(null)}>\r\n                        ‚Üê Back to Groups\r\n                    </button>\r\n                    <GroupChat groupId={selectedGroup.id} />\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Group;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}